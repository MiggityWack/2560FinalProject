//main.cpp:
#include <iostream>
#include <string>
#include "Tournament.h"

using namespace std;

int main() {
    Tournament tourney;
    string filename;

    cout << "Enter the player database filename (e.g., players.txt): ";
    cin >> filename;
    tourney.importPlayers(filename);

    bool done = false;
    while (!done) {
        cout << "\nMenu Options:\n"
             << "1. Exit\n"
             << "2. Add a new player\n"
             << "3. Report a match\n"
             << "4. Search for a player\n"
             << "Enter your choice: ";

        int choice;
        cin >> choice;

        switch (choice) {
            case 1:
                done = true;
                break;
            case 2: {
                string tag;
                int score;
                cout << "Enter player tag: ";
                cin >> tag;
                cout << "Enter player score: ";
                cin >> score;
                tourney.addPlayerFromFile(tag, score, 0);
                break;
            }
            case 3: {
                string player1, player2;
                int player1Wins, player2Wins;
                cout << "Enter first player tag: ";
                cin >> player1;
                cout << "Enter second player tag: ";
                cin >> player2;
                cout << "Enter wins for " << player1 << ": ";
                cin >> player1Wins;
                cout << "Enter wins for " << player2 << ": ";
                cin >> player2Wins;
                tourney.reportMatch(tourney.playerSearch(player1), tourney.playerSearch(player2), player1Wins, player2Wins, false);
                break;
            }
            case 4: {
                string tag;
                cout << "Enter the player's tag to search for: ";
                cin >> tag;
                Tournament::Player* player = tourney.searchPlayerCaseInsensitive(tag);
                if (player) {
                    cout << "Player found: " << player->to_string() << endl;
                } else {
                    cout << "Player not found." << endl;
                }
                break;
            }
            default:
                cout << "Invalid choice. Please try again.\n";
                break;
        }
    }

    cout << "Exiting program. Saving players to file...\n";
    tourney.savePlayers(filename);

    return 0;
}


//Tournament.cpp
#include "Tournament.h"
#include "Utils.h"
#include <iostream>
#include <fstream>
#include <algorithm>
#include <cmath>

Tournament::Player::Player(std::string tag, int score, int gamesPlayed)
    : tag(std::move(tag)), score(score), gamesPlayed(gamesPlayed) {}

std::string Tournament::Player::get_tag() const { return tag; }
int Tournament::Player::get_score() const { return score; }
int Tournament::Player::get_games_played() const { return gamesPlayed; }
void Tournament::Player::set_score(int scoreSet) { score = scoreSet; }
void Tournament::Player::add_win() { wins++; gamesPlayed++; }
void Tournament::Player::add_loss() { losses++; gamesPlayed++; }
void Tournament::Player::add_tie() { ties++; gamesPlayed++; }
std::string Tournament::Player::to_string() const {
    return tag + " " + std::to_string(score) + " " + std::to_string(gamesPlayed);
}
int Tournament::Player::get_wins() const { return wins; }

Tournament::Tournament() : playerCount(0), started(false), manuallySeeded(false) {}

Tournament::Player* Tournament::playerSearch(const std::string& tag) {
    for (auto& player : playerList) {
        if (player.get_tag() == tag) {
            return &player;
        }
    }
    return nullptr;
}

Tournament::Player* Tournament::searchPlayerCaseInsensitive(const std::string& tag) {
    std::string lowerTag = toLower(tag);
    for (auto& player : playerList) {
        if (toLower(player.get_tag()) == lowerTag) {
            return &player;
        }
    }
    return nullptr;
}

bool Tournament::checkForPlayers(const std::string& tag) {
    return playerSearch(tag) != nullptr;
}

void Tournament::addPlayerFromFile(const std::string& tag, int score, int gamesPlayed) {
    playerList.emplace_back(tag, score, gamesPlayed);
}

void Tournament::importPlayers(const std::string& filename) {
    std::ifstream file(filename);
    if (!file) {
        std::cerr << "Error: Could not open file.\n";
        return;
    }

    std::string tag;
    int score, gamesPlayed;
    while (file >> tag >> score >> gamesPlayed) {
        addPlayerFromFile(tag, score, gamesPlayed);
        std::cout << "Loaded player: " << tag << " Score: " << score << " Games: " << gamesPlayed << std::endl; // Debug print
    }
}

void Tournament::savePlayers(const std::string& filename) {
    std::ofstream file(filename);
    if (!file) {
        std::cerr << "Error: Could not open file.\n";
        return;
    }

    for (const auto& player : playerList) {
        file << player.to_string() << std::endl;
    }
}

void Tournament::sortPlayersByScore() {
    std::sort(playerList.begin(), playerList.end(), [](const Player& a, const Player& b) {
        return a.get_score() > b.get_score();
    });
}

void Tournament::reportMatch(Player* player1, Player* player2, int player1Wins, int player2Wins, bool disqual) {
    if (!player1 || !player2) {
        std::cout << "One or both players not found in the tournament.\n";
        return;
    }

    if (player1Wins > player2Wins) {
        player1->add_win();
        player2->add_loss();
        calibrate_score(*player1, *player2, player1Wins, player2Wins);
    } else if (player2Wins > player1Wins) {
        player2->add_win();
        player1->add_loss();
        calibrate_score(*player2, *player1, player2Wins, player1Wins);
    } else {
        player1->add_tie();
        player2->add_tie();
    }
}

void Tournament::calibrate_score(Player& winner, Player& loser, int winnerWins, int loserWins) {
    int scoreDiff = winner.get_score() - loser.get_score();
    int scoreShiftWinner = ((0.5 * scoreDiff) + 100) * std::pow(0.98, winner.get_games_played());
    int scoreShiftLoser = ((0.5 * scoreDiff) + 100) * std::pow(0.98, loser.get_games_played());

    winner.set_score(winner.get_score() + scoreShiftWinner);
    loser.set_score(loser.get_score() - scoreShiftLoser);
}




//Tournament.h
#ifndef TOURNAMENT_H
#define TOURNAMENT_H

#include <string>
#include <vector>

class Tournament {
public:
    class Player {
    public:
        Player(std::string tag, int score, int gamesPlayed);
        std::string get_tag() const;
        int get_score() const;
        int get_games_played() const;
        void set_score(int scoreSet);
        void add_win();
        void add_loss();
        void add_tie();
        std::string to_string() const;
        int get_wins() const;

    private:
        std::string tag;
        int score;
        int gamesPlayed;
        int wins = 0;
        int losses = 0;
        int ties = 0;
    };

    Tournament();
    Player* playerSearch(const std::string& tag);
    Player* searchPlayerCaseInsensitive(const std::string& tag);
    bool checkForPlayers(const std::string& tag);
    void addPlayerFromFile(const std::string& tag, int score, int gamesPlayed);
    void importPlayers(const std::string& filename);
    void savePlayers(const std::string& filename);
    void sortPlayersByScore();
    void reportMatch(Player* player1, Player* player2, int player1Wins, int player2Wins, bool disqual);
    void calibrate_score(Player& winner, Player& loser, int winnerWins, int loserWins);

private:
    std::vector<Player> playerList;
    int playerCount;
    bool started;
    bool manuallySeeded;
};

#endif // TOURNAMENT_H





//Utils.h
#ifndef UTILS_H
#define UTILS_H

#include <string>
#include <algorithm>
#include <cctype>

inline std::string toLower(const std::string& str) {
    std::string lowerStr = str;
    std::transform(lowerStr.begin(), lowerStr.end(), lowerStr.begin(), ::tolower);
    return lowerStr;
}

#endif // UTILS_H
